
[tool.poetry]
authors = ["Cody Fincher <cody.fincher@gmail.com>"]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Operating System :: OS Independent",
]
description = "Litestar integration with the httpx-oauth library."
include = []
license = "Apache"
maintainers = ["Cody Fincher <cody.fincher@gmail.com>"]
name = "litestar_httpx_oauth"
packages = [
  {include = "litestar_httpx_oauth", from = "./"},
]
readme = "README.md"
repository = "https://github.com/cofin/litestar_httpx_oauth"
version = "0.0.1"

[tool.poetry.dependencies]
httpx-oauth=">=0.13.0"
litestar=">=2.0.0rc1"
python = ">=3.8,<3.12"

[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = "*"}
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-mock = "*"
black = "*"
mypy = ">=1.0.0"
pre-commit = "*"
ruff = '*'

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
]
fix = true
ignore = [
  "E501", # pycodestyle line too long, handled by black
  "D100", # pydocstyle - missing docstring in public module
  "D101", # pydocstyle - missing docstring in public class
  "D102", # pydocstyle - missing docstring in public method
  "D103", # pydocstyle - missing docstring in public function
  "D104", # pydocstyle - missing docstring in public package
  "D105", # pydocstyle - missing docstring in magic method
  "D106", # pydocstyle - missing docstring in public nested class
  "D107", # pydocstyle - missing docstring in __init__
  "D202", # pydocstyle - no blank lines allowed after function docstring
  "D205", # pydocstyle - 1 blank line required between summary line and description
  "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037", # pyupgrade - removes quotes from type annotation
  "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010", # flake8-bugbear - do not call setattr with a constant attribute value
  "B008", #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
]
line-length = 120
select = [
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "D", # pydocstyle
  "DJ", # flake8-django
  "DTZ", # flake8-datetimez
  "E", # pycodestyle errors
  "ERA", # eradicate
  "EXE", # flake8-executable
  "F", # pyflakes
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "N", # pep8-naming
  "PIE", # flake8-pie
  "PLC", # pylint - convention
  "PLE", # pylint - error
  "PLW", # pylint - warning
  "PTH", # flake8-use-pathlib
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RUF", # Ruff-specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "W", # pycodestyle - warning
  "YTT", # flake8-2020
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["litestar_httpx_oauth", "tests/"]
target-version = "py8"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
  "classmethod",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ['F401', 'D104']
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.ruff.isort]
known-first-party = ['tests', 'litestar_httpx_oauth']

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
disallow_any_generics = false
disallow_untyped_decorators = true
exclude = '''(?x)(
^build/
|^dist/
)
'''
implicit_reexport = false
plugins = ["pydantic.mypy"]
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
ignore_missing_imports = true
module = "tests.*"
strict = false
warn_return_any = false
warn_unused_ignores = false

[tool.slotscheck]
strict-imports = false

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--cov=litestar_httpx_oauth/ --cov-report=term-missing"
asyncio_mode = "auto"
testpaths = ["tests"]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]
